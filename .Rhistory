library(roxygen2)
use_vignette("package_details")
getwd()
library(devtools)
use_vignette("pkg_detail")
factorial_loop <- function(x){
if(x == 0 || x==1){
cat("Factorial of", x, "is", "1")
}
else{
fac <- x
vec <- c((x-1):1)
for(i in vec){
fac <- fac * i
}
return(fac)
}}
factorial_loop(15)
factorial_loop(5)
factorial_loop <- function(x){
if(x == 0 || x==1){
cat("Factorial of", x, "is", "1")
}
else{
fac <- x
vec <- c((x-1):1)
for(i in vec){
fac <- fac * i
}
return(fac)
}}
####
# The reduce function
factorial_reduce <- function(x){
if(x == 0 || x==1){
cat("Factorial of", x, "is", "1")
}
else{
Reduce(function(x, y){
as.numeric(x*y)
}, c(x:1))
}
}
####
# The recursion function
factorial_recursive <- function(x){
if(x == 0 || x==1){
return(1)
}
else{
fac <- return(x * factorial_recursive(x-1))
}
}
###
# The memorization function
fac <- c(1,2,NA,NA,NA,NA)
factorial_memoization <- function(x){
#  if(!is.numeric(x)){
#    print("Function call failed. Argument must be an integer")
#  }
#  if(x %% 2 != 0){
#    print("Function call failed. Argument must be an interger")
#  }
if(x==0){
return(1)
}
if(!is.na(fac[x])){
fac[x]
}
else{
fac[x] <<- factorial_memoization(x-1) * x   #facmem(3) facmem(2)
fac[x]
}
}
library(microbenchmark)
factorial_perf <- function(x) {microbenchmark(factorial_loop(x),
factorial_reduce(x),
factorial_recursive(x),
factorial_memoization(x)
)}
factorial_perf(10);
factorial_perf(100);
factorial_perf(1000)
getwd()
?tbl_df
library(dplyr)
?tbl_df
?sprintf
?tryCatch
getwd()
setwd(C:/Users/danwb/OneDrive/Documents/R_Work/data())
setwd(C:/Users/danwb/OneDrive/Documents/R_Work/data
setwd("C:/Users/danwb/OneDrive/Documents/R_Work/data")
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2015, 2014))
x <- fars_summarize_years(c(2015, 2014))
class(x)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(3, 2015)
fars_map_state(32, 2015)
fars_map_state(15, 2015)
fars_map_state(16, 2015)
fars_map_state(19, 2015)
library(mapply
)
library(maps)
library(graphics)
fars_map_state(19, 2015)
fars_map_state(16, 2015)
fars_map_state(15, 2015)
filename <- make_filename(year)
x <- make_filename(2015)
data2 <- fars_read(x)
data2
data2$STATE
fars_map_state(1, 2015)
fars_map_state(1, "2015")
fars_map_state(1, 2015)
fars_map_state(1, 2016)
fars_map_state(2, 2015)
fars_map_state(2, "2015")
fars_map_state(3, "2015")
fars_map_state(4, "2015")
fars_map_state(4, 2015)
fars_map_state(3, "2015")
fars_map_state(5, "2015")
fars_map_state(6, "2015")
y <- fars_map_state(6, "2015")
class(y)
getwd()
setwd("C:/Users/danwb/OneDrive/Documents/R_Work/dbpack")
getwd()
